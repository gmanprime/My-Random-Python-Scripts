import processing
from pprint import pprint as pp
from qgis.core import QgsProject, QgsProcessing

# *********************************************************
# get the active polygon layer
dmaBoundary = QgsProject.instance().mapLayersByName('DMA_Boundary_V3')[0]

# get the raster layer
rasterLayer = QgsProject.instance().mapLayersByName('Addis_Ababa_Elevation')[0]

# *********************************************************
# create a point layer from the values of the raster layer
pointLayer = processing.run("native:pixelstopoints", {
    'INPUT_RASTER': rasterLayer,
    'RASTER_BAND': 1,
    'FIELD_NAME': 'elevation',
    'OUTPUT': 'pointLayer'
})

# *********************************************************
# join the point layer to the original polygon layer
# This layer contains point features that have all the altitude data laid out in a point grid.
# From this we can find the points with the smallest and highest elevation value.
# And from the min and max values, we can then find the average altitude and the point closest to that average value

joinedLayer = processing.run("native:joinattributesbylocation", {
    'INPUT': pointLayer['OUTPUT'],
    'PREDICATE': [0],
    'JOIN': dmaBoundary,
    'JOIN_FIELDS': ['DMA'],
    'METHOD': 0,
    'DISCARD_NONMATCHING': True,
    'PREFIX': '',
    'OUTPUT': 'joinedLayer'
})


# Here we are converting the Dictionary generated by the process into a geoLayer
vectorJoinedLayer = QgsVectorLayer(joinedLayer['OUTPUT'], "joinedLayer", "ogr")

# Add the converted geoLayer to the project for visibility
QgsProject.instance().addMapLayer(vectorJoinedLayer)

# *********************************************************
# classify features based on DMA
# what this section basically does is take each feature out of the vector geoLayer "vectorJoinedLayer" and
# then adds it to a dictionary to be classified by DMA

dmaDict = {}  # create a dictionary that will hold the data classified further by using DMA's as key classifiers

# classify every feature
for feature in vectorJoinedLayer.getFeatures():
    dma = feature["DMA"]  # get DMA value of the current feature

    # checks to see if the DMA already exists in the dmaDict dictionary
    # and if not, adds it as a possible empty list
    if dma not in dmaDict:
        dmaDict[dma] = []

    # this proceeds to add the current feature to the dictionary variable
    dmaDict[dma].append(feature)

# *********************************************************
# find the features with the biggest and smallest elevation values

# These are the features that have been determined to be the biggest smallest and most average in terms of elevation
# this is the variable where these features are put
outputFeatures = []

# this function can be used to make new features similar in pattern to the above layers


def makeFeat(dma, elevation, stat):
    # QgsFeature is an python Object version of a qgis feature.
    feat = QgsFeature()

    # adds the fieds DMA, elevation and stat to the feature
    feat.addFields([
        QgsField("DMA", QVariant.Int),
        QgsField("elevation", QVariant.Int),
        QgsField("stat", QVariant.Int),
    ])

    feat['DMA'] = dma  # assign dma value
    feat['elevation'] = minFeature['elevation']  # assign elevation value
    # assign the type of elevation classification (min, max, avg)
    feat['stat'] = 'min'
    return feat


for dma in dmaDict:
    minFeature = min(dmaDict[dma], key=lambda f: f['elevation'])
    # minFeature = min(dmaDict.values(),
    #                  key=lambda feature: feature['elevation'])
    maxFeature = max(dmaDict[dma], key=lambda feature: feature['elevation'])

    # find the feature with the closest elevation to the mean
    meanElevation = sum([f['elevation']
                        for f in dmaDict[dma]]) / len(dmaDict[dma])

    avgFeature = min(dmaDict[dma], key=lambda f: abs(
        f['elevation'] - meanElevation))

    # create a new feature with the min, max, and average elevation values
    outputFeatures.extend([minFeature, maxFeature, avgFeature])

pp(outputFeatures[0])

# Create a new layer from the list of features
#
minMaxLayer = QgsVectorLayer("Point?crs=EPSG:20137&memory",
                             "min max layer", "memory")

# Add the features to the layer
minMaxLayer.dataProvider().addAttributes(joinedLayer[0].fields())
minMaxLayer.dataProvider().addFeatures(outputFeatures)

# Add the layer to the current project
QgsProject.instance().addMapLayer(minMaxLayer)
